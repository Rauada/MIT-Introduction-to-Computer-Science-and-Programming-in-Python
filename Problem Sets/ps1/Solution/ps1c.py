#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Mon Nov  7 11:10:09 2022@author: rauadaIn Part B, you had a chance to explore how both the percentage of your salarythat you save each month and your annual raise affect how long it takes you tosave for a down payment. This is nice, but suppose you want to set a particulargoal, e.g. to be able to afford the down payment in three years. How muchshould you save each month to achieve this? In this problem, you are going towrite a program to answer that question. To simplify things, assume:1. Your semi­annual raise is .07 (7%)2. Your investments have an annual return of 0.04 (4%)3. The down payment is 0.25 (25%) of the cost of the house4. The cost of the house that you are saving for is $1M.You are now going to try to find the best rate of savings to achieve a downpayment on a $1M house in 36 months. Since hitting this exactly is a challenge,we simply want your savings to be within $100 of the required down payment.Test Case 1>>>Enter the starting salary:​ 150000Best savings rate:​ 0.4411Steps in bisection search:​ 12>>>Test Case 2>>>Enter the starting salary:​ 300000Best savings rate:​ 0.2206Steps in bisection search:​ 9>>>Test Case 3>>>Enter the starting salary:​ 10000It is not possible to pay the down payment in three years. >>>"""annual_salary = float(input("Enter your annual salary: "))savings = 0total_cost = 1000000down_payment = 0.25 * total_costreturn_on_savings = 0.04/12semi_annual_raise = 0.07steps = 0low = 0high = 10000savings_rate = (low + high) / 2.0 / 10000print(f"Required down payment of ${down_payment:,.2f}.")while abs(savings - down_payment) >= 100:    steps += 1    savings = 0    current_salary = annual_salary    print(f"\nCalculating with {savings_rate*100:,.2f}% savings rate...")    # Calculate savings after 36 months at the given saving rate.    for month in range(1,37):        if month % 6 == 0:            current_salary += current_salary * semi_annual_raise        monthly_salary = current_salary / 12        savings += savings_rate * monthly_salary + savings * return_on_savings    print(f"Reached savings of ${savings:,.2f}.")        if savings > down_payment:        # Lower savings rate.        print("Savings greater than down payment.")        high = savings_rate * 10000    else:        # Increase savings rate.        print("Savings lower than down payment.")        low = savings_rate * 10000            savings_rate = (low + high) / 2.0 / 10000        if savings_rate == 1:        breakif savings_rate == 1:    print("\nIt is not possible to pay the down payment in three years.")    print(f"Steps in bisection search: {steps}")else:    print(f"\nBest savings rate: {savings_rate*100:,.2f}%")    print(f"Steps in bisection search: {steps}")